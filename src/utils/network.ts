import { Network, type NetworkType } from "../types/network";
/**
 * Network data
 * @public
 */
export const NETWORK_DATA: { [key in Network]: NetworkType } = {
  [Network.ethereum]: {
    assetPrefix: "https://app.zerion.io/",
    bgColor: "#ebecf8",
    chainId: 1,
    icon: "icons/icon-ethereum.svg",
    key: Network.ethereum,
    label: "Ethereum",
    primaryColor: "#3741ba",
    scanLabel: "Etherscan",
    scanPrefix: "https://etherscan.io/address/",
    scanPrefixTx: "https://etherscan.io/tx/",
    short: "eth",
  },
  [Network.polygon]: {
    bgColor: "#ece5fa",
    chainId: 137,
    icon: "icons/icon-polygon.svg",
    key: Network.polygon,
    label: "Polygon",
    primaryColor: "#7a4add",
    scanLabel: "Polygonscan",
    scanPrefix: "https://polygonscan.com/address/",
    scanPrefixTx: "https://polygonscan.com/tx/",
    short: "matic",
  },
  [Network.avalanche]: {
    bgColor: "#ffefef",
    chainId: 43114,
    icon: "icons/icon-avalanche.svg",
    key: Network.avalanche,
    label: "Avalanche",
    primaryColor: "#e84142",
    scanLabel: "AVASCAN",
    scanPrefix: "https://avascan.info/blockchain/dfk/address/",
    scanPrefixTx: "https://avascan.info/blockchain/x/tx/",
    short: "avax",
  },
  [Network.aptos]: {
    bgColor: "#e9faf3",
    icon: "icons/icon-aptos.svg",
    key: Network.aptos,
    label: "Aptos",
    primaryColor: "#6fe0b2",
    scanLabel: "Aptoscan",
    scanPrefix: "https://aptoscan.com/account/",
    scanPrefixTx: "https://aptoscan.com/transaction/",
  },
  [Network.arbitrum]: {
    bgColor: "#eaedfb",
    chainId: 42161,
    icon: "icons/icon-arbitrum.svg",
    key: Network.arbitrum,
    label: "Arbitrum",
    primaryColor: "#2949d4",
    scanLabel: "Arbitrum One Explorer",
    scanPrefix: "https://arbiscan.io/address/",
    scanPrefixTx: "https://arbiscan.io/tx/",
    short: "arb",
  },
  [Network.arbitrum_one]: {
    bgColor: "#eaedfb",
    chainId: 42161,
    icon: "icons/icon-arbitrum.svg",
    key: Network.arbitrum_one,
    label: "Arbitrum One",
    primaryColor: "#2949d4",
    scanLabel: "Arbitrum One Explorer",
    scanPrefix: "https://arbiscan.io/address/",
    scanPrefixTx: "https://arbiscan.io/tx/",
    short: "arb",
  },
  [Network.arbitrum_nova]: {
    bgColor: "#fdf2ea",
    chainId: 42170,
    icon: "icons/icon-arbitrum.svg",
    key: Network.arbitrum_nova,
    label: "Arbitrum Nova",
    primaryColor: "#ee7c31",
    scanLabel: "Arbitrum Nova Explorer",
    scanPrefix: "https://nova.arbiscan.io/address/",
    scanPrefixTx: "https://nova.arbiscan.io/tx/",
    short: "arb",
  },
  [Network.apechain]: {
    bgColor: "#DEE5FD",
    icon: "icons/icon-apechain.svg",
    key: Network.apechain,
    label: "ApeChain",
    primaryColor: "#2253F1",
    scanLabel: "ApeChain Explorer",
    scanPrefix: "https://apescan.io/address/",
    scanPrefixTx: "https://apescan.io/tx/",
    short: "apechain-mainnet",
  },
  [Network.arweave]: {
    bgColor: "#e1e1e1",
    icon: "icons/icon-arweave.svg",
    key: Network.arweave,
    label: "Arweave",
    primaryColor: "#222326",
    scanLabel: "Arweave Explorer",
    scanPrefix: "https://viewblock.io/arweave/address/",
    scanPrefixTx: "https://viewblock.io/arweave/tx/",
  },
  [Network.bsc]: {
    bgColor: "#fdf3d4",
    chainId: 56,
    icon: "icons/icon-bsc.svg",
    key: Network.bsc,
    label: "BNB Chain",
    primaryColor: "#f0b90b",
    scanLabel: "BscScan",
    scanPrefix: "https://bscscan.com/address/",
    scanPrefixTx: "https://bscscan.com/tx/",
    short: "bsc",
  },
  [Network.binanceSmartChain]: {
    bgColor: "#fdf3d4",
    chainId: 56,
    icon: "icons/icon-bsc.svg",
    key: Network.binanceSmartChain,
    label: "BNB Chain",
    primaryColor: "#f0b90b",
    scanLabel: "BscScan",
    scanPrefix: "https://bscscan.com/address/",
    scanPrefixTx: "https://bscscan.com/tx/",
    short: "bsc",
  },
  [Network.base]: {
    bgColor: "#e9eefe",
    chainId: 8453,
    icon: "icons/icon-base.svg",
    key: Network.base,
    label: "Base",
    primaryColor: "#2151f5",
    scanLabel: "BaseScan",
    scanPrefix: "https://basescan.org/address/",
    scanPrefixTx: "https://basescan.org/tx/",
    short: "base",
  },
  [Network.flow]: {
    bgColor: "#e5fdf3",
    icon: "icons/icon-flow.svg",
    key: Network.flow,
    label: "Flow",
    primaryColor: "#00ef8b",
    scanLabel: "Flow Explorer",
    scanPrefix: "https://evm.flowscan.io/address/",
    scanPrefixTx: "https://evm.flowscan.io/tx/",
  },
  [Network.conflux]: {
    bgColor: "#e8e8ea",
    chainId: 1030,
    icon: "icons/icon-conflux.svg",
    key: Network.conflux,
    label: "Conflux",
    primaryColor: "#1e1e2b",
    scanLabel: "ConfluxScan",
    scanPrefix: "https://www.confluxscan.io/address/cfx:",
    scanPrefixTx: "https://www.confluxscan.io/transaction/",
  },
  [Network.crossbell]: {
    bgColor: "#fef8e9",
    chainId: 3737,
    icon: "icons/icon-crossbell.svg",
    key: Network.crossbell,
    label: "Crossbell",
    primaryColor: "#f7d16a",
    scanLabel: "Crossbell Explorer",
    scanPrefix: "https://scan.crossbell.io/address/",
    scanPrefixTx: "https://scan.crossbell.io/tx/",
  },
  [Network.fantom]: {
    bgColor: "#e6e7fd",
    chainId: 250,
    icon: "icons/icon-fantom.svg",
    key: Network.fantom,
    label: "Fantom",
    primaryColor: "#0810ef",
    scanLabel: "FTMScan",
    scanPrefix: "https://ftmscan.com/address/",
    scanPrefixTx: "https://ftmscan.com/tx/",
  },
  [Network.farcaster]: {
    bgColor: "#efeaf8",
    icon: "icons/icon-farcaster.svg",
    key: Network.farcaster,
    label: "Farcaster",
    primaryColor: "#432C8D",
    scanPrefix: "",
  },
  [Network.optimism]: {
    bgColor: "#fdebea",
    chainId: 10,
    icon: "icons/icon-optimism.svg",
    key: Network.optimism,
    label: "Optimism",
    primaryColor: "#ea3431",
    scanLabel: "OP Explorer",
    scanPrefix: "https://optimistic.etherscan.io/address/",
    scanPrefixTx: "https://optimistic.etherscan.io/tx/",
    short: "op",
  },
  [Network.zksync_era]: {
    bgColor: "#ebf0fe",
    chainId: 324,
    icon: "icons/icon-zksync.svg",
    key: Network.zksync_era,
    label: "zkSync Era",
    primaryColor: "#3567f6",
    scanLabel: "zkSync Era Explorer",
    scanPrefix: "https://explorer.zksync.io/address/",
    scanPrefixTx: "https://explorer.zksync.io/tx/",
  },
  [Network.gnosis]: {
    bgColor: "#e8ebea",
    chainId: 100,
    icon: "icons/icon-gnosis.svg",
    key: Network.gnosis,
    label: "Gnosis",
    primaryColor: "#1c352a",
    scanLabel: "GnosisScan",
    scanPrefix: "https://gnosisscan.io/address/",
    scanPrefixTx: "https://gnosisscan.io/tx/",
    short: "xdai",
  },
  [Network.scroll]: {
    bgColor: "#f1e7db",
    chainId: 534352,
    icon: "icons/icon-scroll.svg",
    key: Network.scroll,
    label: "Scroll",
    primaryColor: "#b78544",
    scanLabel: "Scrollscan",
    scanPrefix: "https://scrollscan.com/address/",
    scanPrefixTx: "https://scrollscan.com/tx/",
  },
  [Network.solana]: {
    assetPrefix: "https://portfolio.jup.ag/portfolio/",
    bgColor: "#F0E3FF",
    chainId: 534352,
    icon: "icons/icon-solana.svg",
    key: Network.solana,
    label: "Solana",
    primaryColor: "#9945FF",
    scanLabel: "Solscan",
    scanPrefix: "https://solscan.io/account/",
    scanPrefixTx: "https://solscan.io/tx/",
  },
  [Network.zora]: {
    bgColor: "#efefef",
    chainId: 7777777,
    icon: "icons/icon-zora.svg",
    key: Network.zora,
    label: "Zora",
    primaryColor: "#141414",
    scanLabel: "Zora Explorer",
    scanPrefix: "https://explorer.zora.energy/address/",
    scanPrefixTx: "https://explorer.zora.energy/tx/",
    short: "zora",
  },
  [Network.mastodon]: {
    bgColor: "#e8e8fe",
    icon: "icons/icon-mastodon.svg",
    key: Network.mastodon,
    label: "Mastodon",
    primaryColor: "#6364f6",
    scanPrefix: "",
  },
  [Network.lens]: {
    bgColor: "#d9f1dc",
    chainId: 137,
    icon: "icons/icon-lens.svg",
    key: Network.lens,
    label: "Lens",
    primaryColor: "#2CC256",
    scanPrefix: "https://momoka.lens.xyz/",
  },
  [Network.linea]: {
    bgColor: "#efefef",
    icon: "icons/icon-linea.svg",
    key: Network.linea,
    label: "Linea",
    primaryColor: "#000000",
    scanLabel: "Linea Explorer",
    scanPrefix: "https://lineascan.build/address/",
    scanPrefixTx: "https://lineascan.build/tx/",
  },
  [Network.snapshot]: {
    bgColor: "#fef7ed",
    icon: "icons/icon-snapshot.svg",
    key: Network.snapshot,
    label: "Snapshot",
    primaryColor: "#f3b04e",
    scanPrefix: "",
  },
  [Network.erc1577]: {
    bgColor: "#ebecf8",
    icon: "icons/icon-ethereum.svg",
    key: Network.erc1577,
    label: "ERC-1577",
    primaryColor: "#3741ba",
    scanPrefix: "",
  },
  [Network.bitcoin]: {
    bgColor: "#FDE9D1",
    icon: "icons/icon-bitcoin.svg",
    key: Network.bitcoin,
    label: "Bitcoin",
    primaryColor: "#F7931A",
    scanLabel: "Bitcoin Explorer",
    scanPrefix: "https://www.blockchain.com/explorer/addresses/btc/",
    scanPrefixTx: "https://www.blockchain.com/explorer/transactions/btc/",
  },
  [Network.vsl]: {
    bgColor: "#ebecf8",
    chainId: 12553,
    icon: "icons/icon-vsl.svg",
    key: Network.vsl,
    label: "RSS3 VSL Mainnet",
    primaryColor: "#1477F9",
    scanLabel: "VSL Scan",
    scanPrefix: "https://scan.rss3.io/address/",
    scanPrefixTx: "https://scan.rss3.io/tx/",
  },
  [Network.xLayer]: {
    bgColor: "#efefef",
    chainId: 196,
    icon: "icons/icon-xlayer.svg",
    key: Network.xLayer,
    label: "X Layer",
    primaryColor: "#000000",
    scanLabel: "X Layer Explorer",
    scanPrefix: "https://www.okx.com/web3/explorer/xlayer/address/",
    scanPrefixTx: "https://www.okx.com/web3/explorer/xlayer/tx/",
  },
  [Network.unichain]: {
    bgColor: "#FEAFF0",
    chainId: 130,
    icon: "icons/icon-unichain.svg",
    key: Network.unichain,
    label: "Unichain",
    primaryColor: "#F50DB4",
    scanLabel: "Unichain Explorer",
    scanPrefix: "https://uniscan.xyz/address/",
    scanPrefixTx: "https://uniscan.xyz/tx/",
  },
  [Network.mantle]: {
    bgColor: "#e8f5f4",
    chainId: 5000,
    icon: "icons/icon-mantle.svg",
    key: Network.mantle,
    label: "Mantle",
    primaryColor: "#00d4aa",
    scanLabel: "Mantle Scan",
    scanPrefix: "https://mantlescan.xyz/address/",
    scanPrefixTx: "https://mantlescan.xyz/tx/",
    short: "mnt",
  },
  [Network.zero]: {
    bgColor: "#e9e7fc",
    chainId: 543210,
    icon: "icons/icon-zero.svg",
    key: Network.zero,
    label: "ZERO Network",
    primaryColor: "#6b5dd3",
    scanLabel: "ZERϴ Explorer",
    scanPrefix: "https://layerzeroscan.com/address/",
    scanPrefixTx: "https://layerzeroscan.com/tx/",
    short: "zero",
  },
  [Network.starknet]: {
    bgColor: "#ffe9f5",
    icon: "icons/icon-starknet.svg",
    key: Network.starknet,
    label: "Starknet",
    primaryColor: "#ec796b",
    scanLabel: "Starkscan",
    scanPrefix: "https://voyager.online/address",
    scanPrefixTx: "https://voyager.online/tx",
  },
  [Network.abstract]: {
    bgColor: "#e6f0ff",
    chainId: 2741,
    icon: "icons/icon-abstract.svg",
    key: Network.abstract,
    label: "Abstract",
    primaryColor: "#0052ff",
    scanLabel: "Abstract Explorer",
    scanPrefix: "https://explorer.mainnet.abs.xyz/address/",
    scanPrefixTx: "https://explorer.mainnet.abs.xyz/tx/",
    short: "abs",
  },
  [Network.world]: {
    bgColor: "#f0f0f0",
    chainId: 480,
    icon: "icons/icon-world.svg",
    key: Network.world,
    label: "World Chain",
    primaryColor: "#000000",
    scanLabel: "World Explorer",
    scanPrefix: "https://worldscan.org/address/",
    scanPrefixTx: "https://worldscan.org/tx/",
    short: "wld",
  },
};

/**
 * Gets network metadata for a given network identifier
 * Supports lookup by network key, network short name, or chainId
 *
 * @param networkIdentifier - Network identifier (key, short name, or chain ID)
 * @returns Network metadata object
 */
export const getNetwork = (networkIdentifier: string | number): NetworkType => {
  const isNumberParam = !isNaN(Number(networkIdentifier));
  if (isNumberParam) {
    const networkByChainId = Object.values(NETWORK_DATA).find(
      (x) => x.chainId === Number(networkIdentifier),
    );
    if (networkByChainId) return networkByChainId;
  } else {
    if (NETWORK_DATA[networkIdentifier as Network])
      return NETWORK_DATA[networkIdentifier as Network];
    const networkByShort = Object.values(NETWORK_DATA).find(
      (network) => network.short === networkIdentifier,
    );

    if (networkByShort) {
      return networkByShort;
    }
  }

  return {
    key: String(networkIdentifier),
    icon: "",
    label: String(networkIdentifier),
    primaryColor: "#000000",
    bgColor: "#efefef",
    scanPrefix: "",
  };
};
